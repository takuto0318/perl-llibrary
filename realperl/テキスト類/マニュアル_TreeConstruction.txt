木の構築ルーチン

ファイル：TreeConstruction.pm
パッケージ：TreeConstruction
サブルーチン：TreeConstruction

[引数1]	構築する木のパターン
[戻り値]	構築された木のルートへのリファレンス

・木のパターンで用いる記号	(上ほど結合優先順順位が高い)(整理中)

>	…親子関係。「A > B」とすると、BはAの子供となる。
,	…カンマ。「A , B」のような記述で「AとBは兄弟」と定義する。
-	…サブツリーの重複マッチングを認める(別記)
#	…サブ属性の定義
{ }	…サブ属性のキーを定義(省略時は"val")
##	…プレースの定義(別記)

・記述例	(現状、半角スペースは無視される)　A B      AB

A	
	…{ type => "A" }となるようなノード
A > B	
	…Aノードの子要素の第一子がBノードであるような木 { type => "A" , elem => "※" } ※がリストへのリファレンスであり、要素[0]がノードBへのリファレンス
A > B , C	
	…↑の例に加えelemが指す子要素リストの要素[1]がノードCへのリファレンス
A#nakami	
	…{ type => "A", val => "nakami" }となるようなノード
A#{attribute}nakami	
	…{ type => "A", attribute => "nakami" }となるようなノード
A##place1
	…{ type => "A" }となるようなノード。該当ノードは"place1"の名前でプレースとして登録される

・既知のバグ(致命的なもの)
①ルートノードに対して#や##、-などノード単位のオプションが指定できない
	→生成規則の問題なので生成規則を改修する必要がある
	→ルート以外は可能(なはず)
	→よって記述例「A#nakami」はエラーで動作せず、「A > B#nakami」は正常に動作する

②兄弟関係の指定に,(カンマ)が必要
	→各マッチング系モジュールと表現が異なる






